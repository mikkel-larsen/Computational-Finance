//
//  Gamma.hpp
//  HandIn1
//
//  Created by Mikkel Larsen on 16/09/2020.
//  Copyright Â© 2020 Mikkel Larsen. All rights reserved.
//

#ifndef Gamma_hpp
#define Gamma_hpp

#include <stdio.h>
#include <cmath>
#include <limits>
#include <vector>
#include <algorithm>

static const double cof[14] = {57.1562356658629235, -59.5979603554754912,
14.1360979747417471, -0.491913816097620199, 0.339946499848118887e-4,
0.465236289270485756e-4, -0.983744753048795646e-4, 0.15088703224912494e-3,
-0.210264441724104883e-3, 0.217439618115212643e-3, -0.164318106536763890e-3,
0.844182239838527433e-4, -0.261908384015814087e-4, 0.36899182659316234e-5};

static const double y[18] = {0.0021695375159141994, 0.011413521097787704,0.027972308950302116,0.051727015600492421,
0.082502225484340941, 0.12007019910960293,0.16415283300752470, 0.21442376986779355, 0.27051082840644336,
0.33199876341447887, 0.39843234186401943, 0.46931971407375483, 0.54413605556657973, 0.62232745288031077,
0.70331500465597174, 0.78649910768313447, 0.87126389619061517, 0.95698180152629142};

static const double w[18] = {0.0055657196642445571, 0.012915947284065419,0.020181515297735382,0.027298621498568734,
0.034213810770299537,0.040875750923643261,0.047235083490265582, 0.053244713977759692,0.058860144245324798,
0.064039797355015485,0.068745323835736408,0.072941885005653087,0.076598410645870640,0.079687828912071670,
0.082187266704339706,0.084078218979661945,0.085346685739338721,0.085983275670394821};

static const double pi = 3.14159265358979323846;
static const double EPS = std::numeric_limits<double>::epsilon();
static const double FPMIN = std::numeric_limits<double>::min()/EPS;

static const int ASWITCH = 100;


double logGammaFunc(double xx);

double gammaFunc(double x);

double gammpapprox(double a, double x, int psig);

double gser(const double a, const double x);

double gcf(const double a, const double x);

double gammp(const double a, const double x);

double gammaInv(double p, double a);

double gammaCDF(double x, double alpha, double beta);


#endif /* Gamma_hpp */
